const fetch = require('node-fetch');
const prompt = require('prompt');
const crypto = require("crypto").webcrypto;

async function run() {
    console.log("Blooket Request Decryption/Forger - github@seancabahug\nsorry ms. burns")

    prompt.start();
    prompt.message = "";
    prompt.colors = false;
    
    const {roomCode} = await prompt.get([{
        name: 'roomCode',
        description: "Blooket room code"
    }]);

    const {AESkey} = await prompt.get([{
        name: 'AESkey',
        description: "AES key found in source code"
    }]);

    const {bsidCookie} = await prompt.get([{
        name: 'bsidCookie',
        description: "Value of BSID cookie"
    }]);

    const encodedSecret = (new TextEncoder).encode(AESkey);
    const hashedSecret = await crypto.subtle.digest("SHA-256", encodedSecret);
    const cryptoKey = await crypto.subtle.importKey("raw", hashedSecret, { name: "AES-GCM" }, false, ["encrypt", "decrypt"]);

    while (true) {
        const {forgeOrDec} = await prompt.get([{
            name: 'forgeOrDec',
            description: "Forge request or decrypt? (f/d)"
        }]);

        switch (forgeOrDec) {
            case 'f':
                const {jsonPayload} = await prompt.get([{
                    name: 'jsonPayload',
                    description: "JSON payload to send"
                }]);

                const encodedStringifiedData = (new TextEncoder).encode(jsonPayload);

                const iv_raw = await crypto.getRandomValues(new Uint8Array(12));
                const iv = Array.from(iv_raw).map(e => String.fromCharCode(e)).join("");

                const rawEncryptedData = await crypto.subtle.encrypt({ name: "AES-GCM", iv: iv_raw }, cryptoKey, encodedStringifiedData);
                const encryptedData = Array.from(new Uint8Array(rawEncryptedData)).map(e => String.fromCharCode(e)).join("");

                const finalEncryptedData = btoa(iv + encryptedData);

                fetch(`https://fb.blooket.com/c/firebase/games/${roomCode}/v`, {
                    "headers": {
                        "accept": "application/json, text/plain, */*",
                        "accept-language": "en-US,en;q=0.9",
                        "content-type": "text/plain",
                        "sec-ch-ua": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\"",
                        "sec-ch-ua-mobile": "?0",
                        "sec-ch-ua-platform": "\"Windows\"",
                        "sec-fetch-dest": "empty",
                        "sec-fetch-mode": "cors",
                        "sec-fetch-site": "same-site",
                        "x-blooket-build": "3c07a390-159b-467e-9e1f-513e5cae7fd8",
                        "cookie": "bsid="+bsidCookie+";"
                    },
                    "referrerPolicy": "no-referrer",
                    "body": finalEncryptedData,
                    "method": "PUT"
                }).then(res => res.text())
                .then(text => console.log(text));
                break;
            case 'd':
                const {encryptedPayload} = await prompt.get([{
                    name: 'encryptedPayload',
                    description: "Encrypted payload"
                }]);

                const rawData = atob(encryptedPayload);

                const _iv = rawData.substring(0, 12);
                const rawIv = new Uint8Array(_iv.split("").map(a => a.charCodeAt(0)));

                const enc = rawData.substring(12, rawData.length);
                const rawEnc = new Uint8Array(enc.split("").map(a => a.charCodeAt(0)));

                try {
                    const decrypted = await crypto.subtle.decrypt({ name: "AES-GCM", iv: rawIv }, cryptoKey, rawEnc);
                    const decoded = (new TextDecoder).decode(decrypted);

                    console.log("Decrypted: " + decoded);
                } catch (error) {
                    console.log("Error when decrypting: " + error);
                }
                break;
            default:
                console.log("Invalid input.");
        }
    }
}

run();